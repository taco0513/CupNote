name: 🚀 Deploy CupNote

on:
  push:
    branches: [main]
    paths:
      - 'cupnote-app/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - 'cupnote-app/**'
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  # 🧪 Test Stage
  test:
    name: 🧪 Test & Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: 📦 Install dependencies
        run: |
          cd cupnote-app
          bun install --frozen-lockfile

      - name: 🔍 Type check
        run: |
          cd cupnote-app
          bun run type-check

      - name: 🧹 Lint
        run: |
          cd cupnote-app
          bun run lint

      - name: 🧪 Run unit tests
        run: |
          cd cupnote-app
          bun test:unit

      - name: 📊 Test coverage
        run: |
          cd cupnote-app
          bun test:coverage

      - name: 🎭 Setup Playwright
        run: |
          cd cupnote-app
          bunx playwright install --with-deps

      - name: 🌐 Run E2E tests
        run: |
          cd cupnote-app
          bun test:e2e

      - name: 📤 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            cupnote-app/coverage
            cupnote-app/test-results
          retention-days: 7

  # 🏗️ Build Stage
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: 📦 Install dependencies
        run: |
          cd cupnote-app
          bun install --frozen-lockfile

      - name: 🔨 Build application
        run: |
          cd cupnote-app
          bun run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: cupnote-app/dist
          retention-days: 1

  # 🚀 Deploy Stage (Production)
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://cupnote.vercel.app
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: cupnote-app/dist

      - name: 🚀 Deploy to Vercel
        run: |
          cd cupnote-app
          bunx vercel --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: 🔔 Notify success
        if: success()
        run: |
          echo "✅ Successfully deployed to production!"
          echo "🌐 URL: https://cupnote.vercel.app"

  # 🔍 Deploy Stage (Preview)
  deploy-preview:
    name: 🔍 Deploy Preview
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    environment:
      name: preview
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: cupnote-app/dist

      - name: 🔍 Deploy Preview to Vercel
        id: deploy
        run: |
          cd cupnote-app
          DEPLOYMENT_URL=$(bunx vercel --token=${{ secrets.VERCEL_TOKEN }} --confirm)
          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: 💬 Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🔍 Preview deployment ready!\n\n🌐 URL: ${{ steps.deploy.outputs.deployment-url }}\n\n✨ This preview will be updated with each commit.`
            })

  # 🏥 Health Check
  health-check:
    name: 🏥 Production Health Check
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: 🏥 Check deployment health
        run: |
          echo "Checking production health..."
          for i in {1..5}; do
            if curl -f https://cupnote.vercel.app > /dev/null 2>&1; then
              echo "✅ Production is healthy!"
              exit 0
            fi
            echo "⏳ Attempt $i failed, retrying..."
            sleep 10
          done
          echo "❌ Production health check failed!"
          exit 1

      - name: 🚨 Notify if unhealthy
        if: failure()
        run: |
          echo "🚨 Production deployment is unhealthy!"
          echo "Please check: https://cupnote.vercel.app"
